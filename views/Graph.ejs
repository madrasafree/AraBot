<!-- Include header, all the scripts and linkes (bootstrap, googlefont...) -->
<%- include("partials/header") -%>

<!-- page title -->
<title>AraBot Editor</title>

<!-- import GoJS library -->
<script src="https://unpkg.com/gojs/release/go.js"></script>
<script type="text/javascript">
  //jshint esversion:6

  function init() {

    //store the go.GraphObject.make in $
    var $ = go.GraphObject.make;

    //define myDiagram as a new diagram
    myDiagram = $(go.Diagram, "myDiagramDiv");

    // helper definitions for node templates
    function nodeStyle() {
      return [
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify), {
          locationSpot: go.Spot.Center
        }
      ];
    }

    function makePort(name, align, spot, output, input) {
      var horizontal = align.equals(go.Spot.Top) || align.equals(go.Spot.Bottom);
      // the port is basically just a transparent rectangle that stretches along the side of the node,
      // and becomes colored when the mouse passes over it
      return $(go.Shape, {
        fill: "transparent",
        strokeWidth: 0,
        width: horizontal ? NaN : 8, // if not stretching horizontally, just 8 wide
        height: !horizontal ? NaN : 8, // if not stretching vertically, just 8 tall
        alignment: align, // align the port on the main Shape
        stretch: (horizontal ? go.GraphObject.Horizontal : go.GraphObject.Vertical),
        portId: name, // declare this object to be a "port"
        fromSpot: spot, // declare where links may connect at this port
        fromLinkable: output, // declare whether the user may draw links from here
        toSpot: spot, // declare where links may connect at this port
        toLinkable: input, // declare whether the user may draw links to here
        cursor: "pointer", // show a different cursor to indicate potential link point
        mouseEnter: function(e, port) { // the PORT argument will be this Shape
          if (!e.diagram.isReadOnly) port.fill = "rgba(255,0,255,0.5)";
        },
        mouseLeave: function(e, port) {
          port.fill = "transparent";
        }
      });
    }

    //add style to text into shapes
    function textStyle() {
      return {
        font: "bold 11pt Lato, Helvetica, Arial, sans-serif",
        stroke: "#F8F8F8"
      }
    }


    myDiagram.nodeTemplateMap.add("", // the default category
      $(go.Node, "Table", nodeStyle(),
        $(go.Shape, "Rectangle", {
            fill: "#59595a",
            stroke: "#09d3ac",
            strokeWidth: 3.5
          },
          new go.Binding("figure", "figure")),
          $(go.Panel, "Auto","Vertical",
        $(go.TextBlock, textStyle(), {
            margin: 8,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center",
            editable: true
          },
          new go.Binding("text", "USER_ANSWER").makeTwoWay()),
          $(go.TextBlock, textStyle(),
                {
                  margin: 8,
                  maxSize: new go.Size(200, NaN),
                  wrap: go.TextBlock.WrapFit,
                  textAlign: "Center",
                  editable: true
                },
                new go.Binding("text","RECORDING").makeTwoWay())),
        makePort("T", go.Spot.Top, go.Spot.TopSide, false, true),
        makePort("L", go.Spot.Left, go.Spot.LeftSide, true, true),
        makePort("R", go.Spot.Right, go.Spot.RightSide, true, true),
        makePort("B", go.Spot.Bottom, go.Spot.BottomSide, true, false)
      ));

    myDiagram.nodeTemplateMap.add("Conditional",
      $(go.Node, "Table", nodeStyle(),
        // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
        $(go.Shape, "Rectangle", {
            fill: "#59595a",
            stroke: "#00A9C9",
            strokeWidth: 3.5
          },
          new go.Binding("figure", "figure")),
        $(go.Panel, "Auto", "Vertical",
          $(go.TextBlock, textStyle(), {
              margin: 8,
              maxSize: new go.Size(200, NaN),
              wrap: go.TextBlock.WrapFit,
              textAlign: "Center",
              editable: true
            },
            new go.Binding("text", "BOT_Q").makeTwoWay()),
          $(go.TextBlock, textStyle(), {
              margin: 8,
              maxSize: new go.Size(200, NaN),
              wrap: go.TextBlock.WrapFit,
              textAlign: "Center",
              editable: true
            },
            new go.Binding("text", "RECORDING").makeTwoWay())),
        // four named ports, one on each side:
        makePort("T", go.Spot.Top, go.Spot.Top, false, true),
        makePort("L", go.Spot.Left, go.Spot.Left, true, true),
        makePort("R", go.Spot.Right, go.Spot.Right, true, true),
        makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
      ));

    myDiagram.nodeTemplateMap.add("Start",
      $(go.Node, "Table", nodeStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle", {
            desiredSize: new go.Size(70, 70),
            fill: "#59595a",
            stroke: "#FF9E2C",
            strokeWidth: 3.5
          }),
          $(go.TextBlock, "Start", textStyle(), new go.Binding("text"))

        ),
        // three named ports, one on each side except the top, all output only:
        makePort("L", go.Spot.Left, go.Spot.Left, true, false),
        makePort("R", go.Spot.Right, go.Spot.Right, true, false),
        makePort("B", go.Spot.Bottom, go.Spot.Bottom, true, false)
      ));

    myDiagram.nodeTemplateMap.add("End",
      $(go.Node, "Table", nodeStyle(),
        $(go.Panel, "Spot",
          $(go.Shape, "Circle", {
            desiredSize: new go.Size(60, 60),
            fill: "#59595a",
            stroke: "#DC3C00",
            strokeWidth: 3.5
          }),
          $(go.TextBlock, "End", textStyle(),
            new go.Binding("text"))
        ),
        // three named ports, one on each side except the bottom, all input only:
        makePort("T", go.Spot.Top, go.Spot.Top, false, true),
        makePort("L", go.Spot.Left, go.Spot.Left, false, true),
        makePort("R", go.Spot.Right, go.Spot.Right, false, true)
      ));

    // taken from ../extensions/Figures.js:
    go.Shape.defineFigureGenerator("File", function(shape, w, h) {
      var geo = new go.Geometry();
      var fig = new go.PathFigure(0, 0, true); // starting point
      geo.add(fig);
      fig.add(new go.PathSegment(go.PathSegment.Line, .75 * w, 0));
      fig.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
      fig.add(new go.PathSegment(go.PathSegment.Line, w, h));
      fig.add(new go.PathSegment(go.PathSegment.Line, 0, h).close());
      var fig2 = new go.PathFigure(.75 * w, 0, false);
      geo.add(fig2);
      // The Fold
      fig2.add(new go.PathSegment(go.PathSegment.Line, .75 * w, .25 * h));
      fig2.add(new go.PathSegment(go.PathSegment.Line, w, .25 * h));
      geo.spot1 = new go.Spot(0, .25);
      geo.spot2 = go.Spot.BottomRight;
      return geo;
    });

    myDiagram.nodeTemplateMap.add("Comment",
      $(go.Node, "Auto", nodeStyle(),
        $(go.Shape, "File", {
          fill: "#59595a",
          stroke: "#DEE0A3",
          strokeWidth: 3
        }),
        $(go.TextBlock, textStyle(), {
            margin: 8,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            textAlign: "center",
            editable: true
          },
          new go.Binding("text").makeTwoWay())
        // no ports, because no links are allowed to connect with a comment
      ));


    // replace the default Link template in the linkTemplateMap
    myDiagram.linkTemplate =
      $(go.Link, // the whole link panel
        {
          routing: go.Link.AvoidsNodes,
          curve: go.Link.JumpOver,
          corner: 5,
          toShortLength: 4,
          relinkableFrom: true,
          relinkableTo: true,
          reshapable: true,
          resegmentable: true,
          // mouse-overs subtly highlight links:
          mouseEnter: function(e, link) {
            link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)";
          },
          mouseLeave: function(e, link) {
            link.findObject("HIGHLIGHT").stroke = "transparent";
          },
          selectionAdorned: false
        },
        new go.Binding("points").makeTwoWay(),
        $(go.Shape, // the highlight shape, normally transparent
          {
            isPanelMain: true,
            strokeWidth: 8,
            stroke: "transparent",
            name: "HIGHLIGHT"
          }),
        $(go.Shape, // the link path shape
          {
            isPanelMain: true,
            stroke: "gray",
            strokeWidth: 2
          },
          new go.Binding("stroke", "isSelected", function(sel) {
            return sel ? "dodgerblue" : "gray";
          }).ofObject()),
        $(go.Shape, // the arrowhead
          {
            toArrow: "standard",
            strokeWidth: 0,
            fill: "gray"
          }),
        $(go.Panel, "Auto", // the link label, normally not visible
          {
            visible: false,
            name: "LABEL",
            segmentIndex: 2,
            segmentFraction: 0.5
          },
          new go.Binding("visible", "visible").makeTwoWay(),
          $(go.Shape, "RoundedRectangle", // the label shape
            {
              fill: "#F8F8F8",
              strokeWidth: 0
            }),
          $(go.TextBlock, "Yes", // the label
            {
              textAlign: "center",
              font: "10pt helvetica, arial, sans-serif",
              stroke: "#333333",
              editable: true
            },
            new go.Binding("text").makeTwoWay())
        )
      );

    // Make link labels visible if coming out of a "conditional" node.
    // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
    function showLinkLabel(e) {
      var label = e.subject.findObject("LABEL");
      if (label !== null) label.visible = (e.subject.fromNode.data.category === "Conditional");
    }

    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;
    // initialize the Palette that is on the left side of the page
    myPalette =
      $(go.Palette, "myPaletteDiv", // must name or refer to the DIV HTML element
        {
          // Instead of the default animation, use a custom fade-down
          "animationManager.initialAnimationStyle": go.AnimationManager.None,
          "InitialAnimationStarting": animateFadeDown, // Instead, animate with this function

          nodeTemplateMap: myDiagram.nodeTemplateMap, // share the templates used by myDiagram
          model: new go.GraphLinksModel([ // specify the contents of the Palette
            {
              category: "Start",
              text: "Start"
            },
            {
              category: "Conditional",
              BOT_Q: "BOT question",
              RECORDING: "REC name"
            },
            {
              category: "answer",
              USER_ANSWER: "USER ANSWER",
              RECORDING: "Necessary"
            },
            {
              category: "End",
              text: "End"
            },
            {
              category: "Comment",
              text: "Comment"
            }
          ])
        });

    // This is a re-implementation of the default animation, except it fades in from downwards, instead of upwards.
    function animateFadeDown(e) {
      var diagram = e.diagram;
      var animation = new go.Animation();
      animation.isViewportUnconstrained = true; // So Diagram positioning rules let the animation start off-screen
      animation.easing = go.Animation.EaseOutExpo;
      animation.duration = 900;
      // Fade "down", in other words, fade in from above
      animation.add(diagram, 'position', diagram.position.copy().offset(0, 200), diagram.position);
      animation.add(diagram, 'opacity', 0, 1);
      animation.start();
    }
  } // end init


  /* **************************************************************** */

  // TODO: make this function save auto
  function save() {
    document.getElementById("newGraph").value = myDiagram.model.toJson();
    myDiagram.isModified = false;
  }


  function load(jasonGraph) {
    myDiagram.model = go.Model.fromJson(jasonGraph);
  }
</script>

</head>

<!-- onload="init()" to init the page when it's loading -->

<body onload="init()" style="margin: 0.8em;">

  <div class="container-fluid">

    <div class="buttons">
      <h3> Lesson Title: "<%= lesson[0].name %>" </h3>
      <button id="displayButton" type="button" class="btn" onclick="load(<%= JSON.stringify(lesson[0].graph) %>)">Last save</button>
      <form class="" action="/saveGraph" method="post">
        <button type="submit" class="btn" id="newGraph" name="newGraph" onclick="save()">Save</button>
        <input type="hidden" name="lessonId" value="<%=lesson[0]._id%>"></input>
      </form>
      <form class="" action="/ClearGraph" method="post">
        <button type="submit" class="btn">Clear</button>
        <input type="hidden" name="lessonId" value="<%=lesson[0]._id%>"></input>
      </form>

    </div>

    <div class="graph_building row">
      <div id="myPaletteDiv" class="col-sm-2"></div>
      <div id="myDiagramDiv" class="col-sm-8"></div>
    </div>

  </div>
  <!-- jquery -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script type="text/javascript">
    // Click load button after 0.5 sec
    var tim = setTimeout(function() {
      $('#displayButton').trigger('click');
    }, 500);
  </script>
</body>

</html>
